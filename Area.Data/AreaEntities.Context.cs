//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Area.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class B2DriveForPostEntities : DbContext
    {
        public B2DriveForPostEntities()
            : base("name=B2DriveForPostEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AvailableUserVisit> AvailableUserVisits { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<PlaceCheckInfo> PlaceCheckInfoes { get; set; }
        public virtual DbSet<PlacePhoto> PlacePhotoes { get; set; }
        public virtual DbSet<ProcessingType> ProcessingTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductRecivedDelivered> ProductRecivedDelivereds { get; set; }
        public virtual DbSet<ProductSale> ProductSales { get; set; }
        public virtual DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public virtual DbSet<RaitingQuestion> RaitingQuestions { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<RentACar> RentACars { get; set; }
        public virtual DbSet<SupervisorVisitPlaceInfo> SupervisorVisitPlaceInfoes { get; set; }
        public virtual DbSet<SupervisorVisitPlacePenetration> SupervisorVisitPlacePenetrations { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLogInformation> UserLogInformations { get; set; }
        public virtual DbSet<UserPassword> UserPasswords { get; set; }
        public virtual DbSet<VisitPlaceInfo> VisitPlaceInfoes { get; set; }
        public virtual DbSet<WareHouse> WareHouses { get; set; }
        public virtual DbSet<WareHouseProduct> WareHouseProducts { get; set; }
        public virtual DbSet<SPPlaceDeliveryProduct> SPPlaceDeliveryProducts { get; set; }
        public virtual DbSet<VisitPlace> VisitPlaces { get; set; }
        public virtual DbSet<SupervisorVisitPlace> SupervisorVisitPlaces { get; set; }
        public virtual DbSet<SupervisorVisitPlaceComment> SupervisorVisitPlaceComments { get; set; }
        public virtual DbSet<VisitPlaceCarInfo> VisitPlaceCarInfoes { get; set; }
        public virtual DbSet<VisitPlaceWareHouse> VisitPlaceWareHouses { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
    
        public virtual ObjectResult<GetDifferentPlace_Result> GetDifferentPlace(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDifferentPlace_Result>("GetDifferentPlace", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetPlaceOccupancyRate_Result> GetPlaceOccupancyRate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> placeID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlaceOccupancyRate_Result>("GetPlaceOccupancyRate", startDateParameter, endDateParameter, placeIDParameter);
        }
    
        public virtual ObjectResult<GetPointActivities_Result> GetPointActivities(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPointActivities_Result>("GetPointActivities", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetSamePlace_Result> GetSamePlace(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSamePlace_Result>("GetSamePlace", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetConversionAndUKS_Result> GetConversionAndUKS(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> placeID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConversionAndUKS_Result>("GetConversionAndUKS", startDateParameter, endDateParameter, placeIDParameter);
        }
    
        public virtual ObjectResult<GetConversionPlaceRate_Result> GetConversionPlaceRate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> placeID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConversionPlaceRate_Result>("GetConversionPlaceRate", startDateParameter, endDateParameter, placeIDParameter);
        }
    }
}
